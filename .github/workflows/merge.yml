name: Merge to main

on:
  push:
    branches:
      - main
    paths-ignore:
      - "**/*.md"
      - ".github/workflows/**"
  workflow_dispatch: {}

env:
  REGISTRY_NAME: burendouk
  IMAGE_NAME: stackedit

jobs:
  get-publish-version:
    runs-on: ubuntu-latest
    outputs:
      publish-version: ${{ steps.get-publish-version.outputs.publish-version }}
    steps:
      - name: Get publish version
        id: get-publish-version
        run: |
          LATEST_VERSION=$(curl --silent "https://api.github.com/repos/${{ github.repository }}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          [  -z "$LATEST_VERSION" ] && LATEST_VERSION="0.0.0"
          VERSION=$(echo $LATEST_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          echo "::set-output name=publish-version::${VERSION}"

  publish-github-release:
    runs-on: ubuntu-latest
    needs: [get-publish-version, build-push]
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GHA_TOKEN }}
        with:
          tag_name: ${{ needs.get-publish-version.outputs.publish-version }}
          release_name: Release ${{ needs.get-publish-version.outputs.publish-version }}
          draft: false
          prerelease: false

  build-push:
    runs-on: ubuntu-latest
    needs: get-publish-version
    steps:
      - name: Get release version
        id: get_version
        run: echo RELEASE_VERSION=$(echo ${GITHUB_REF:10}) >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest,${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ needs.get-publish-version.outputs.publish-version }}

  build-push-ecr:
    runs-on: ubuntu-latest
    needs: get-publish-version
    steps:
      - name: Get release version
        id: get_version
        run: echo RELEASE_VERSION=$(echo ${GITHUB_REF:10}) >> $GITHUB_ENV
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-skip-session-tagging: true
          aws-access-key-id: ${{ secrets.ACTIONS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ACTIONS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_GHA_ROLE }}
          role-duration-seconds: 900
          role-session-name: ${{ github.run_id }}-${{ github.run_number }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push - ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.IMAGE_NAME }}:latest -t $ECR_REGISTRY/${{ env.IMAGE_NAME }}:${{ needs.get-publish-version.outputs.publish-version }} .
          docker push $ECR_REGISTRY/${{ env.IMAGE_NAME }}:latest
          docker push $ECR_REGISTRY/${{ env.IMAGE_NAME }}:${{ needs.get-publish-version.outputs.publish-version }}
